import pdb
from os.path import dirname, basename, isfile
import glob
import inspect, sys
import pkgutil
from exploit_base_c import Exploit


modules = glob.glob(dirname(__file__)+"/*.py")
__all__ = [ basename(f)[:-3] for f in modules if isfile(f)]
__all__ = []
for loader, module_name, is_pkg in  pkgutil.walk_packages(__path__):
    __all__.append(module_name)
    module = loader.find_module(module_name).load_module(module_name)
    exec('%s = module' % module_name)



exploit_base_mod = __import__("exploit_base_c", fromlist=['Exploit'])

sub_modules = [cls for cls in __all__ if cls not in ['exploit_base_c', '__init__']]

def get_all_exploit_classes():
	#First loop to make sure exploit_base is first in list
	exploit_sub_classes = list()
	base_exploit_class = None
	for name, obj in inspect.getmembers(__import__("exploit_base_c")):
		if inspect.isclass(obj):
			obj


	for mod_name in sub_modules:
		for name, obj in inspect.getmembers(__import__(mod_name)):
			if inspect.isclass(obj):
				pdb.set_trace
				if obj != Exploit:
					print name, obj
					exploit_sub_classes.append(obj)

	return exploit_sub_classes


#ADD INTO ALL AFTER
__all__.append("get_all_exploit_classes")

inspect.getmembers(modules, inspect.isclass)
pdb.set_trace()